// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
