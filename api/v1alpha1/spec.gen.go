// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
