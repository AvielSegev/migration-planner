// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
