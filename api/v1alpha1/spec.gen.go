// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
