// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/jNgz+VwTdgL04dtrdw+C33q2HFbsfRXN7WvvASkysmy15FJ0iK/y/D5LsNE2c",
	"7Q5ohwLbm21a/MiP5EfdS+Wa1lm07GV5L72qsIH4eE7kKDy05FokNhg/N+g9rDA8avSKTMvGWVmm/8Vo",
	"ziRvWpSl9EzGrmTfZ5Lwj84Qaln+tnVz02dy4TpSeAilCIFRn3F4WTpqgGUpNTDO2DQTGJk0do2WHW3C",
	"kQOrhQYnDZ6BOz9p6lr9bUHsJRoxtwhZOAky28ltF+Jm683dfkHFcsvO2/j/IUdHUpoK4rjz98bH9Axj",
	"E71+R7iUpXxVPHRHMbRGMVSr33oDIthEZ1sWH3dG+i6MFyAIuSMr1lB3KJaOhIK69oIrYKGd/Z7HPxxX",
	"SCJF6nOZfW0bnomqa8DOCEHDbY1ixyzcUnCFIhUjvRkvgl8I9nyqpQjBB8+HQA2oylg8CnVXbfYAAgfG",
	"xhiu5TswdUd4LYd4cnExBJTYMV5g03LwgRRfrRPGph4MzmANpg7AuTgTVzFMoWogszToBVjx8+fPl2Oy",
	"ymkUt11gGYMnFm6NREajMDyZuP/7cg5cPpAnPlkUblmKa7nolELvr6VwtJtpLj64kIpdulJUzK0vi2Jl",
	"OP/9R58bF9qt6azhTaGcZTK3HTvyhcY11oU3qxmQqgyj4o6wgNbMlIsTb5z1eaNf+RbVDKyebeftcDD2",
	"hqCPsrF0IdHaKLQeHwZLnrWgKhSn+TwMKtWylGPcd3d3OURz7mhVDGd98f7i7fnHxfnsNJ/nFTd1HBXD",
	"dXD3wayGTriswVokcXZ5ITO5RvKJ3c5qXBqLOhxzLVpojSzlD/k8PwlTAFzFmoTsi/VJ4eM4DmWqkSdG",
	"In0XIJSra1Rje44nI0yK6kLLUv4Uf19srYS+dSGz4Pl0Po/S7CyjjaIBbVsbFY8XX4ZJSVrxj0qSahQr",
	"8DjiT7+E7F/PT54MK22zCahfLXRcOTJ/BspDqWDlg2YmeuKCWiEfslobz0c5DIr6bzD4IN8vn8XW+Qka",
	"0yIUMFB5wGRafIvRGLYaen7j9OaJWRw2bP94dzJ12B9U8OSJsacoTfHoVML585fwDWhxldh9QW3TZ/tK",
	"V9wHae6/SvCO9NSuwkVNJWiQkQL0vq8Atr03jCdMsAQpluOlcrznPe6cbIeg/UV08+y68KI0IYC+fn7Q",
	"j47fuc5+m5SHC1wqcIsq3J70sc65QtD/981/rm/CR4+0HkudLoKF7G/6vwIAAP//A0OI6EIPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
