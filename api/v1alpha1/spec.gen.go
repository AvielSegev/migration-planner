// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/bOhb+KwQ7wGxkyel0MfAuSdupMU0bJH0smixOxGOLjUTqkkc2fAP99wuSliVb",
	"suM+clHgdmfxcR7f+c6DfuCpLkqtUJHlkwdu0wwL8D9fGaON+1EaXaIhiX65QGthju6nQJsaWZLUik/C",
	"edZsR5xWJfIJt2SkmvO6jrjBPyppUPDJl42Y2zriUzUz0NckgMCSNuFLEha2f2hmEM+hhFTS6n9nbmWt",
	"VyrCORpeR5w0Qf7oIb/y8IjZfrcvMdq143bjv777iim1GjgYAyv3nWlL9hLNeV5ZQrPl5D772tsKaanN",
	"/SFsFBRDLrW+oqoK55UlUAKM4BEX0h27qwhFx4nDaHg9x3gcYAvu2gOxeuOQGdrf1d8e3hXeh7cDWdTl",
	"1pDhU7VARdqs+qDKhqz/MjjjE/4saTMoWadPEhhdR3wR4nLo7KcL23PMXYvWqobsu9aVSbFvXGoQCMUp",
	"+dTQpgDiE+csjkgWA1kZuSsCFUnIP5p8kC1SDC93MToMRnOwjvZz0hJQZbusVJpGqVYKU0fGiC9BklTz",
	"0UybUWu1Awp9qYr4HChDJ3AklXSbo9bIiFfliPTIgTHA7MaAqZrpQfuqUnwbtDshlaLJlI2vWzq7gO5G",
	"JeoEtmvJfmqc+/NHl4QdW/cmdBD+VlraKjuHor+m6kA1uN5EfLuRhHUmLQNmkCqj2ALyCtlMG5ZCnltG",
	"GRATWv2bmhPaRZ4FS23Mo2O71inLqgLUyCAIuMuRdbaZnjHKkIUohS9pmZMLbj8eyieDYJ3kvqIC0kwq",
	"3Ktqma12FDgMpPI23PDXIPPK4A1f2xOz6dqggI60DIuSnAw0/lNpJlWgqhMGC5C5UxyzU3blzWRpDkbO",
	"JFoGir358OGycTbVAtld5VBGJ4mYXqAxUiCTNOi4PRzONZYteOy9QqZnE3bDr6s0RWtvONOm62nMLrRz",
	"Rc30hGVEpZ0kyVxSfP9fG0vt6FZUStIqSbUKbUsbmwhcYJ5YOR+BSTNJmFJlMIFSunrikkxqZeNCPLMl",
	"piNQYrTJyH5i9JLg08UVWs/qM4NwL/RS9RMtk5b03EAxPNd8Y7MvpPrkgjx82hKWR3TLjZD1jdAFhxu3",
	"66UHGvRrbS7k3AA5Oh177rOk7DMYJdXcHr7zTtNh8TuetWA3pg/a+ahR+yy4HWTBwMSVltV5M7Ae7vl9",
	"CtV++LoP8+l3XC68vVKrLsYghHRrkF9uGbqXcq2DqgtBKBc/KlL/qAADxXfj8xinjyL08WweGlV5X1XU",
	"cqZxb8MDD9ieQAzFu0/T2s9pYaLJZYrKYjsF8NMS0gzZ83jspgo3/fGmyC6Xyxj8dqzNPFnftcnb6fmr",
	"d9evRs/jcZxRkXtgJDnM+EVjELvMQSk07PRyyiO+QGNDK6iUwJlUKDwZSlRQSj7h/4nH8Ylr2UCZx9KV",
	"6mRxkoQorntKjjTQv8M6A5bqPMe06aXNTa8mWDUVfMJf+uPXm12DttTOMyf5+Xjsk1grQuUnHCjLXKb+",
	"evJ13dYDzR4de0JD8RHYtvj9/533L8YnP01XeKkPqPqooKJMG/mng9yFChxZv/AAj398z5H6qObS0l4M",
	"3fj3dyDYzpq/PoqltgMwhqmdwRrKHpJhSr9uNl29QEtnWqx+Morr50C9XZXIVFj3Injyk3UPQRrsESGE",
	"46cP4RkIdhXQ/YVoU0e7lS55kKI+qtztYVS3vvmKaqDA8G/Ll11Z05ebB05zXrp1V4abt+okvFu3ORN1",
	"oNmdl2+fvCIcqgb/CCo5pS+eXuk7Ta91pb6tcbi3baBUial7WIp9TL1CEL95+punT8xTt2jRLBpqhTE3",
	"4fVt/VcAAAD//0W412/8GAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
