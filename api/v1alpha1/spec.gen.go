// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWS2/cRgz+K4NJgV70WKc5FLo5iYMazcOw01NtFPQMd8VUmlE51BpbY/97MSPtw/tI",
	"E8AuAjQ3aR78yI8fybnXxredd+gk6OpeB1NjC+nzjNlz/OjYd8hCmJZbDAFmGD8tBsPUCXmnq+G8Wm1n",
	"WhYd6koHYXIzvVxmmvGvnhitrn5fm7lZZvrK92xwH8owgqA9lfgz9dyC6EpbEMyF2gMYmSYbz+4vuzk6",
	"8bw4uOugxYMbQUD65Aq6vo1u3wEJuVk+9ZwbRotOCJqgM42JrkzPQGqMBnJyFDfzDXim+y4Xn8cQ9E12",
	"DPAPclN/0KG+s1/HyA7rZPUY7jq4h6DbVGVbCdiG3jjubz+hEb1O4at0fj+RRwjecS6dOm78LYUUNgm2",
	"yeoPjFNd6WflRsLlqN9ylNRybQ2YYZGMrXP6UL7DuqKgQDFKz07NoelRTT0rA00TlNQgynr3o6xO+Jhr",
	"NXgaCp19aa2cqrpvweWMYOG2QbW1rfxUSY1qSMvwR0FFuxD3i0O6Z4QQLe8DtWBqcngU6q5e7ABEDsgl",
	"H671G6CmZ7zWoz+FOh8dGtihoLDtJNpATr/OqyilqM1oDOZATQQu1Km6TG4q0wDTlDAocOqXjx8vVsEa",
	"b1Hd9pFljJZE+Tkyk0VFcjDw8Pl0jlxuyFMfHCo/rdS1vuqNwRCutfK8HWmh3vkYipv6StUiXajKckZS",
	"/PlzKMhHubW9I1mUxjthuu3FcygtzrEpA81yYFOToJGesYSOcuNTUZF3oWjts9ChycHZfF2C+4WxUwTL",
	"1MSGrtCQQRdwU1j6tANTo3peTGKhcqMrvfL77u6ugLRdeJ6V491Qvj1/dfb+6ix/XkyKWtomlQpJE829",
	"o9mohIsGnENWpxfnOtNz5DCw2zuLU3Jo4zXfoYOOdKV/KibFSawCkDrlJEZfzk/KkMpxTFODcqAkhnUF",
	"yvimQbOS5+pmghm8Ore60q/T8av1LmPofIwsWn4+maT54Z2gS00Duq4hk66Xn8ZKGXrFv3aSIUcpAw89",
	"/vBrjP7F5OTRsIaRewDqNwe91J7p70h5TBXMQuyZAz1pis5Q9lltKMhRDmNH/S8Y3LTvb5/FzocDNA6D",
	"UMFI5R6Tw+C7Wm3GqYZBXnq7eGQWxwm7fDg7hXtc7mXw5JGxD1E6+GOHFE6ePoUvwarLgd1vSDbLbLfT",
	"lfdkl1/U7o4oaru/pY7K0KIgR+BdW+ev12+G1XmK67ENr9571fD2e6iZbIua3RF08+Qd4XPd4H8hpQj6",
	"4ulB33t543v3dYMjPhcHSXVo4lvNHlPqJYL9rtPvOn1incbFgDxfSWt45pZ6ebP8JwAA///2eqFzxRAA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
