// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bRhP+K4vNC7wXiZTdHArelMRBhebDsNJT7cN6dyROSu6ys0MZqsH/XuwuKcsS",
	"lSaAXQRobuR+zDPzzDMzey+1qxtnwbKXxb30uoRaxc8LIkfhoyHXADFCXK7Be7WG8GnAa8KG0VlZpPNi",
	"2J5I3jYgC+mZ0K5l100kwZ8tEhhZ/L4zc9NN5NK1pOEYShMoBjPn8LNyVCuWhTSKYcpYj2BMJJpw9njZ",
	"bsCyo+3orlU1jG54Vtz60a22Md/m20H8aGQPvIPZd3OyF/w+2M3Orrv9DJrljr7X8fwxiSeCO3Annjpt",
	"/B36GCgy1NHq/whWspAv8gf55L128j6d3c6aIlLbaGzH52PppHWBXihBwC1ZsVFVC2LlSGhVVV5wqVgY",
	"Z//PwwnHJZBInvpMTr5Wp3NRtrWyUwJl1G0FYm9buJXgEkTKSPpDL4JdFfazMc0RKB8sHwPVSpdo4STU",
	"Xbk9AAgcoI0+XMu3CquW4Fr2/mRi0TuU2EEvoG442ACKv9YJtEmNwZjaKKwCcCbm4iq6KXSlCFcIXigr",
	"fvn06XIIVjsD4rYNLEOwxMJtgAgNCOTRwP2X09lz+UCe+GhBuFUhruWy1Rq8v5bC0X6kmXjvQih25QpR",
	"Mje+yPM1cvbHzz5DF+RWtxZ5m2tnmfC2ZUc+N7CBKve4nirSJTJobgly1eBUu1hU6KzPavPCN6Cnyprp",
	"ruiOC+OgCLrYQFYuBFqhBuvhobDkvFG6BHGezUKhUiULOfh9d3eXqbidOVrn/V2fv1u8vviwvJieZ7Os",
	"5LqKpYJcBXPvcd0r4bJS1gKJ+eVCTuQGyCd2W2tghRZMuOYasKpBWcifsll2FqpAcRlzEqLPN2e5j+XY",
	"p6kCHimJtC6U0K6qQA/yHG5GmOTVwshCvonHl7tdAt+4EFmwfD6bxd7tLIONTUM1TYU6Xs8/95WSesU/",
	"dpKUo5iBxx5//DVE/3J29mRYadyNQP1mVculI/wrUB5SpdY+9MxET5xga+BjViv0fJLD0FH/DQYf2vf3",
	"z2Lj/AiNaRAK1VN5xGQafMthM0w18PzKme0Ts9hP2O7x7GRqoTvK4NkTY49RmvwxKYWz50/hK2XEVWL3",
	"O5JNNznsdPk9mu6r2t0JRe33t9hRSdXAQAH40Nbize7NMJzHsB7a8PDCK9Jr77FmJnvUHI6gm2fvCF/q",
	"Bv8JKQXQl88P+sHxW9fabxsc4bmYJNWADm81c0qpV6DMD53+0Okz6zQseqDNIK30zM1ld9P9HQAA////",
	"CoVpQRAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
