// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
