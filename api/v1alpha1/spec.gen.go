// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
