// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS2/bRhD+K4tNgV4oUk5zKHRz7KQRmocRJ7nEPoy5I2kTcpfdHcpQDf33YnZJPUhK",
	"dtC4CNCcbO1j5ptvvp0Z3snclpU1aMjLyZ30+QJLCP++cM46/qdytkJHGsNyid7DHPlfhT53uiJtjZzE",
	"86LdTiStKpQT6clpM5frdSId/lVrh0pOPm/MXK8T+Up7snMHZd+bAgL+qwnLsNBY1YZwjk6uN37AOVjx",
	"71KbT1DUOHzaE1ZDO114rZHmRhKRXG/c2ZsvmBNbnJqZg2HknqyLvzb49w/NHOIZVJBrWv3x/EB8lqC4",
	"91BYubuH9LDbt5h0cQyF2aV5ZguFLkQBSmkWARQXe9F1Yg0Xpud+KJ8t4L4fU5ef3vgDKTuEcrtgkG6t",
	"+3osCS13aOqSWfIERoFTnHTNwG5qQrVDyhbssgAzPX+Anhrmm/P389u53pK9E0+yq7BhXS7RkHWrfsS6",
	"lewvDmdyIp9k2yqQNSUgi7rmICNpx85yhrqY+VrSuBrCd2lrl2MfXO4QCNUpRdG4EkhOOFgckS4HKkvC",
	"VxQa0lB8dMWgqrQaXt7l6DgZ7UHWFJQ4aM4TUO13tWQsjXJrDOYsoUTegiZt5qOZdaMtaiYKQ7lN5Bxo",
	"gWxwpI3mzdEWZCLrakR2xGQM6jECmJqZHcRXV+rbqO2kVHMIIfpNrHs+dwntZiXZSewuksPSOAvn+wI5",
	"QH8Hazh12Phr7WmvJhzLfiPVgep0ucn4fjOM60J7AcIh1c6IJfcTMbNO5FAUXtACSChrfqX2hOXMi4jU",
	"pzJ5aOc9FYu6BDNyCApuChQ728LOBC1QxCzFX9oLtgu8nw69J4fg2XLfUQn5Qhs86Op2seo4YA60CRiu",
	"5EvQRe3wSjZ4UjFtAEV2tBdYVsQ20IWfxgptolTZGCxBF+w4FafifYAp8gKcnmn0Aox49eHDRRtsbhWK",
	"m5pZRrZEwi7ROa1QaBoM3B9PZ8PlljzxzqCws4m4kpd1nqP3V1JYtxtpKt5YDsXM7EQsiCo/ybK5pvTr",
	"7z7VluVW1kbTKsutic3GOp8pXGKReT0fgcsXmjCn2mEGleZ6wo9MW+PTUj3xFeYjMGq0eZH9h9F7BE1L",
	"7VTeqj5rB5Zjz2E7r61Di/wap5IHXzGW3ui5A+JExiQenSMOznzbeOy/NeCg/MYowhR1ZGTbhviQ+SAY",
	"699MtklpMW4oD1EfYLNf+Nah3cXGUOgcjcdtMZWnFeQLFE/TMRdnbqKy1ert7W0KYTu1bp41d332enr2",
	"4u3li9HTdJwuqCxC4Jo4XBkB8YO9KMAYdOL0YsrzDzofX1RtFM60QRWyV6GBSsuJ/C0dpydc+YAWIXWs",
	"+Gx5kvlQgpunWSANlMG4LkDktigwb0tSezO4iaimSk7keTh+udl16CvLkbHlp+NxeBHWEJrQKKCqCp2H",
	"69mXpjpGXdzbPeK7DBnYR/zuT47+2fjku/mKH20Drj4aqGlhnf6bKedUwdyHaTf2Nv4OmyP1WS20p4Mc",
	"chf9Lxjctuwfn8XK+gEa4/AjoKGyx2Qcdi7bTa4N6Om5VavvzGIzVa33KxC5Gte9DJ58Z99DlEY8KqZw",
	"/PgpfA5KvI/s/kCyWSfdSpfdabV+ULk7oKjd+hYqqoMSKXyyf+7amp5v5sT2vOZ1LsPtyD+J4/++ZpId",
	"arpjx/WjV4Rj1eB/ISV2+uzxnb619NLW5tsaB38iRElVmPN8rg4p9T2C+qnTnzp9ZJ3yoke3bKUVx9xM",
	"rq/X/wQAAP//cIZSWgcXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
