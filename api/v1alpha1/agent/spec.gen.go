// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bMAz9KwK3o2ulXU++tUMHBNu6okFPRQ6axcQqbEmT6BRd4P8+SIrdfDgFNrSX",
	"bTdFpPgeyUfGayhNY41GTR6KNfiywkbE45VzxoWDdcaiI4XxukHvxRLDUaIvnbKkjIYi+bPenAE9WYQC",
	"PDmll9B1GTj80SqHEor7Icy8y2BmWlfiIVTpUBDKCwo/FsY1gqAAKQhPSDUjGBkoGXwPr/UKNRn3NGrV",
	"osFRgydBrR81tVb+Hre9/JWEDfAAs00z20p+G2w+xDXfH7AkGMo37d/eRefDar5Ug31yg+txvFkkfQzs",
	"aOX2kDZ+hzBd7NrChBC1KlH7iJJaBRdWlBWys3wSquNqKKAisr7g/PHxMRfRnBu35Ju3nn+Zfry6nl2d",
	"nOWTvKKmDpmQojqE+6qWTgQZs5taaI2OXdxM2QkTS9TEUEtrlA6NWKHzSe2tlrhQGmWIYyxqYRUU8CGf",
	"5KeQgRVUxfS5sIqvTrmPRfN8HTLo+E4zbEuH4+TQ1qJENngys2BUIfMWS7VQKFmKCRE/8Z9KKOA2vdyT",
	"RSTlRIOEzkNxv48XeA0QfWAVLCGXXqxFr9nnJpJrMdssjrGGz5Mzero0MuZbGk2oY87C2lqVkTt/8IHI",
	"eivUe4cLKOAdf15SfLOh+Ljqu12BBW7xwlsTVBCCnk0mr0wioe6W89vnIIzzV8RK+3gE6lJIdpsqnDBP",
	"3x7zTouWKuPUzzQB55Pztwe9NvTJtFrGLUJi6eMGSS2Yh7sjw/a8jF6ctOT2Z2M261f4XzhjO5v+/4D9",
	"uwMWvojQrXptp/9dDt28+xUAAP//nD3OyEcKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
