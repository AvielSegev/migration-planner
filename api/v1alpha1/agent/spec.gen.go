// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXTXPbNhD9Kxy0R1JUXJ9481dbTZvUY49zyfiwJlYUEhJAgaU1rob/vQNAFCkKku02",
	"OZkCF7vvvX1cwBtWqkYriZIsKzbMlitswD/eGKOMe9BGaTQk0C83aC1U6B452tIITUJJVoT4pH+dMnrR",
	"yApmyQhZsa5LmcG/W2GQs+LLLs1jl7LfhSVVGWgOq3EgcH8FYeMXtlmFJKzQsG5XB4yBF/e7EfIz1C3G",
	"oy2hjr2ZwuuTbHekAcnjrpx6+ooluYwLuTQQR25JmfBrh38/aGkQr0BDKejlt8sj/BRB/WqQX9m8Irp/",
	"e5gxneKI0ZzKvFQ1R+NZAOfCmQDq2z12E65+w+LaxvrZAz6sI9vm80d7pGXHUA4LEmmtzLdTTei1Q9k2",
	"TiVLIDkY7pouHLCnlpCPRBnAPtcgF9dv8NNW+W386/pOtvdij/ikY4fFffmMkpR5OWQsesv+bHDJCvZT",
	"PkyBfDsC8uBrRzKIdirWdWiK2W1Lt6Vi+O5Va0o8BFcaBEJ+QcE0pgFihSOLGYkmMllSt4WjJAH1g6mj",
	"rhI8vjzW6LQYfaDzFDQYTWcJqLVjL0lFWamkxNJZKGVrECRklS2VyQbUTij04zZlFdAKXcJMSOFeZgPI",
	"lLU6I5U5MaJ+DAAWcqmi+FrN3yftpKXCUfDsd1z3ao4FnXYlHTV2jOS4Ne594gcfGbXJaz3/T80devg+",
	"dSdSxeXZBx2jvp11E666vepPklNEhoO087PrWzgu3rxFKvooKgMETzXeIVglTw74o4fxwEf93wQGmney",
	"8MfbibN0oPiWwe2THe5Mh6b0GHeSe9ZH1DzseeetGjxVixKl9bjCkGEXGsoVJmezuftqnNPZikjbIs/X",
	"6/UM/OuZMlW+3WvzPxdXN5/ub7Kz2Xy2oqb2xAU5uiwAEkomtzVIiSa5uF0kWQIVSkpQcq2EdB/oMxob",
	"7nWt5LgUErlvp0YJWrCC/TKbzz6wlGmgle9lDlrkzx9y6z9em28E7/Lha9ItHd4ZDeoaSkxCWKKWCa0w",
	"sRpLsRTIk5CL+boB94Kzgt2FbeMx4ZEYaJD8peTLtNLiepe9zyncuoPfD7UiDLih/WRaTLd34tgn/xiC",
	"0dKl4n7MlEoSSs8UtK5F6UHnX60DsRmlOuXmyPjr9n3pgPkFq5Xruct4Np9/ZwSh6r6Of/3hbHD+HWuF",
	"/zMipS6BJ3dB3lDzw4+v+SChpZUy4p/g9/P5+Y8v+knRr6qVPFxpobL+AAktePTxFs1z7+swBHLWPXb/",
	"BgAA///I2FF4vg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
