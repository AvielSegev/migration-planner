// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXT1PjuBP9Ki79fkcnDiyn3IBldlO7MBQUzIHiIKxOosFuaaU2KZbyd9+SFMdOrPxj",
	"Zm6J1Op+/fqp1f5guSq1QkCybPzBbD6HkvufV8Yo435oozQYkuCXS7CWz8D9FGBzIzVJhWwc7JNmO2X0",
	"roGNmSUjccbqOmUG/qmkAcHGTys3z3XKJjg1vB9JcOKWlAn/JEFp+0ZTA3DJNc8lvf9x4VaWcSUSzMCw",
	"OmWkiBd7jfzKxx7YfrfvMd3E8bzKX718h5zaCIwbw9/d/7myZG/BXBaVJTBrSW7D155GoIUyr7u4QV7G",
	"Ulqdje41PABWpcvYEkfBjWApE9KZvVQEopPgbqY8hjbiIbwEcgMpdkdF/3T8xfY3kbTGm877RegQm3YV",
	"GAM+wTdAUua9T71sJP1/A1M2Zv/L2nuWLS9ZFnRfp+wtVG+X7eO17SXmjqXLUDF896oyOfTB5QY4gTgn",
	"f4GUKTmxsUsWBiTLyN1N3REBSJIXD6aI6kaK+HKXo91kNIZ1ul25ljhVtqtPVDTIFSLkTpYpW3BJEmeD",
	"qTKDFrUjCnxDS9mM0xycw4FE6TYHLciUVXpAauDIiGi8ATDBqYriq7Q4jtqNkkrR3pllrmsxu4RuViXt",
	"FLaLZLs07r3jB28Zlcm+mn+quG0Nj2N3g6o4PeugY6k/Xt+B9elfGOCvQi2wn/tcWlIzw8v4s3Rkry4l",
	"PvKigri1JdAHtLGVk+WJ0J7iHdU1uR2d84sy13JmOPGXAr5Op4VEONgcj7H+Jmn+jRuUOLNHBlo7ekDQ",
	"G0VHJrV+YmuIjTq00miI3kHTLsIPTPpQWnfntYen+EWJzBS5ri6bkWz3e9W/ZbUfIV7DBPaJw6WHLRU2",
	"qTs/XAjp1nhxuwZ0661sE8QuE3fArcIfdal+1IHh5af52Xft22QPMuqK7NAxi/VDpa1mmvRWOvCEbSlE",
	"rN59mdb+GQrvRSFzQAvt6MvONc/nkJwOR+5FdK8YmxNpO86yxWIx5H57qMwsW5612d+Ty6ub+6vB6XA0",
	"nFNZeGIkOc7YdQMouS04Ipjk/HaSDBI+A6QEUGgl0T2+b2Bs+CqqUMBUIgivDg3ItWRj9ttwNDxhKdOc",
	"5p7cjGuZvZ1koaw2+5CiztqXUlfU/+IyoAueQxLMEjVNaA6J1ZDLqQSRBF/Mxw24J4KN2V041h0BPBLD",
	"Swgj99NmpMnvK++NT+nWHfxmYBmH4aWVBJkK0uUXZew5fw7GYOlCCT9C5AoJ0GfKtS5k7kFn363C9uN0",
	"3+WIjDb1ulYdML9gtXI1dx5PR6OfjCBEXefx619OBmc/MVb4So+EuuAiuQv0hpgnvz7mA/KK5srIf4Pe",
	"z0Znvz7ojaIvqkLhGxJx16ue2FKmz97egnlrdB2aQMbq5/q/AAAA///j9mU7/BAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
