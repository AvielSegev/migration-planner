// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYTVPjOBP+Ky6979GJM7OccgOW2U3twlJQMAeKQ2N1Eg22pJXapFjK/31LUhw7seIE",
	"lrk5Vqs/nn76w3ljuSq1kijJsukbs/kSS/CPF8Yo4x60URoNCfSvS7QWFugeOdrcCE1CSTYN8klznDJ6",
	"1cimzJIRcsHqOmUG/66EQc6mDxs1j3XKZnJuoG+JA4ElZcIvQVjavtDcIJ6DhlzQ629n7s3arpCECzSs",
	"ThkpguKgkH/zdsBtf9rXmO768biJXz39wJxaCwyMgVf3e6ksXasVmlsCCtEA58LBCcX1VpT73O1od9rs",
	"NZrzorKEZguyvdc3vkiklTLPQ0hLKGMAtcihrEqHkSWQHAxnKePCiT1VhLwDyTC23s4x+IUkhHDtQOZ/",
	"d8jEznftt8K7yvvw9tPXATHtcjcWyky+oCRlXvswi6YY/m9wzqbsf1lbodm6PLNQMXXKXkKmhmTvL20v",
	"VHctXZuK+XcpFgYcEWfWVoP1B9aitSVKinIjV9XWSSc3BTxhcbjigljaNdSoPYYkt6oyOfb9zg0CIT/1",
	"zs2VKYHY1KUNRyTKSP9K3RWOkgQUd6aIRiv4lraqEjymSHSzP5zmRrBO99efJaDKditQKhrlSkrMXeGl",
	"bAWChFyM5sqM2igcBdA3+ZQtgJboFI6EFO5w1DqZskqPSI0cOJEqbhyYybmK+ldp/j6odxjgQfTRb2Ld",
	"spl2ktm1FqNHoMOtv3znJaPUOJTnDyWwzdP7ENyBYy8EHadjod9f3qD14Z8ZhGeuVrIf+1JYUgsDZXwc",
	"v3OqlELeQ1FhXNoS6iPa8kbJ+kZorvHid017YBJ8UyZ0Nngq8Fi574KW38FIIRd2+M6VomH1O5G1YDeu",
	"R/086NQ+D+IsiDTxXFfnzZ41PEr6FKr9lH8+bxr9B++HtewDl8tmVHVzNKRnd7a51tqF7QbBKvkRNeq/",
	"7nD607ZBA+WHET1URUeV0PH1E9vCWN9U2rK0CW/DnC4FfRq2odyT4Bh3+iVT+34fGnMhcpQW222YnWrI",
	"l5h8HU/c6HHjgi2JtJ1m2Wq1GoM/HiuzyNZ3bfbn7Pzi6vZi9HU8GS+pLDxkghya7d6VXBcgJZrk9HqW",
	"jBJYoKQEJddK+Bhf0Njw2VVJjnMhkXsGapSgBZuyX8aT8ReHA9DSw56BFtnLlywk3GZvgtdZO5J0Rf1P",
	"OoO6gByTIJaoeUJLTKzGXMwF8iToYt7uuhg4m7KbcK07a70nBkoMu/rDrqXZrxvtjU7h3jv3m+k/DZtA",
	"SxYyFabrT9YjFq/6MVxGS2eK+9mdK0nr1RW0LkTug8h+WCXbr+FDZRTZKeptVjtH/QurleOA0/h1Mvlk",
	"D4LVbVz/+sPR4uQTbYW/BSKmzoAnNwHeYPPLz7d5J6GipTLin8D/k8nJzzd6peibqiT3rYvAdbUHtqbt",
	"o5e3aF4anoemkLH6sf43AAD///xSsCRtEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
