// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT2/bPgz9KgJ/v6NrpV1PvrVbBwTbuqJBT0UOmsXEKmxJk+gUXeDvPkiK3fxxCmxo",
	"L9tuikjxPZKPjNdQmsYajZo8FGvwZYWNiMcr54wLB+uMRUcK43WD3oslhqNEXzplSRkNRfJnvTkDerII",
	"BXhySi+h6zJw+L1VDiUU90OYeZfBzLSuxEOo0qEglBcUfiyMawRBAVIQnpBqRjAyUDL4Hl7rFWoy7mnU",
	"qkWDowZPglo/amqt/DVue/krCRvgAWabZraV/DbYfIhrvj1gSTCUb9q/vYvOh9V8qQb75AbX43izSPoY",
	"2NHK7SFt/A5huti1hQkhalWi9hEltQourCgrZGf5JFTH1VBARWR9wfnj42Muojk3bsk3bz3/PH1/dT27",
	"OjnLJ3lFTR0yIUV1CPdFLZ0IMmY3tdAaHbu4mbITJpaoiaGW1igdGrFC55PaWy1xoTTKEMdY1MIqKOBd",
	"PslPIQMrqIrpc2EVX51yH4vm+VrJju+0wrZ0OEwObS1KZIMnMwtGFTJvsVQLhZKliBDRE/uphAJu08s9",
	"UURKTjRI6DwU9/t40w8DQB9WhfuQRy/UIon2uX3kWsw2K2Os1fPkjJ4ujYy5lkYT6pivsLZWZeTNH3wg",
	"sd4K9b/DBRTwH39eT3yzm/i43rtdaQVu8cJbE/ofgp5NJq9MIqHulvLrpyCJ81fESpt4BOpSSHabKpww",
	"T98e806Llirj1I+k/fPJ+duDXhv6aFot4/4gsfRxd6QWzMPd6Jg9L6EXZyy5/d6AzfrV/YdN1852/zda",
	"f+9oha8gdKte1+m/lkM3734GAAD//4CDfmo7CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
