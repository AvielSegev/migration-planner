// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXQVPjOBP9Ky5939GJA8spN2CZ3dQuDAUFc6A4CKsTa7BbWqlNiqX837ckxbETKyEw",
	"M7dEanW/fv3ULb+xXFVaISBZNn1jNi+g4v7nhTHKuB/aKA2GJPjlCqzlC3A/BdjcSE1SIZsG+6TdThm9",
	"amBTZslIXLCmSZmBf2ppQLDpw9rNY5OyGc4NH0YSnLglZcI/SVDZodHcAJxzzXNJr3+cuZVVXIkECzCs",
	"SRkp4uW7Rn7l7R3YfnfoMd3G8bjOXz19h5y6CIwbw1/d/0JZstdgzsvaEpiNJHfh604j0FKZ533cIK9i",
	"Ka3PRvdaHgDrymVsiaPgRrCUCenMnmoC0UtwP1MeQxfxEF4CuYEUu6eifzr+YvvbSDrjbefDIvSITfsK",
	"jAGf4QsgKfM6pF62kv6/gTmbsv9l3T3LVpcsC7pvUvYSqrfP9v7SDhJzx9JVqBi+W1WbHIbgcgOcQJyS",
	"v0DKVJzY1CULI5JV5O6m7ogAJMnLO1NGdSNFfLnP0X4yWsMm3a1cS5xq29cnKhrlChFyJ8uULbkkiYvR",
	"XJlRh9oRBb6hpWzBqQDncCRRus1RBzJltR6RGjkyIhpvAcxwrqL4ai0+Ru1WSaXo7swq142YfUK3q5L2",
	"CttHslsat97xnbeMyuS9mn+quF0NP8buFlVxejZBx1K/v7wB69M/M8CfhVriMPdCWlILw6v4WPpgr64k",
	"3vOyhri1JdAHtLG1k9WJ0J7iHdU1uT2d84syl3JhOPGnEg61+yap+MYNSlzY/WeuFO13v5VZR3YLPRb/",
	"K5YSIb41n+/c68Pe42LDbOBuI6OBl83d1eG49CJTOtf1efvI2T8Bhrpt/FB+Dm+aTxyuPGypsF9YLoR0",
	"a7y83gC6U+ddgthn4ga4VfijLtWPOjC8+jQ/712kg27R4Vco9nBhw1Bpp5k2vbUOPGE7ChGr91CmjW/s",
	"oQOXMge00D0m2anmeQHJ8XjiZoybC6wg0naaZcvlcsz99liZRbY6a7O/Z+cXV7cXo+PxZFxQVXpiJDnO",
	"2GULKLkuOSKY5PR6lowSvgCkBFBoJdGNsxcwNnxn1ChgLhGEV4cG5FqyKfttPBkfsZRpToUnN+NaZi9H",
	"WSirzd6kaLJu9uiaht8wBnTJc0iCWaLmCRWQWA25nEsQSfDFfNyAeybYlN2EY/2h6pEYXkF4xD5sR5r9",
	"vvbe+pRu3cFvnwDT8BzoJEGmhnT1jRYbkI/BGCydKeGHcq6QAH2mXOtS5h509t0q7D733rsckcdCs6lV",
	"B8wvWK1czZ3H48nkJyMIUTd5/PqXk8HJT4wVvnsjoc64SG4CvSHm0a+PeYe8pkIZ+W/Q+8nk5NcHvVL0",
	"RdUofEMi7nrVA1vJ9NHbWzAvra5DE8hY89j8FwAA//8XDfGKThAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
