// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYXVPrNhP+Kx6976UTB8pV7oBy2kwLZWDgXDBcLNYm0cGWVGlNhjL+7x1JcezEwgmU",
	"cxek1e6zz36aN5arUiuJkiybvjGbL7EE//PCGGXcD22URkMC/XGJ1sIC3U+ONjdCk1CSTYN80lynjF41",
	"simzZIRcsLpOmcG/K2GQs+nDRs1jnbKZnBvoW+JAYEmZ8JcgLG1faG4Qz0FDLuj1tzN3srYrJOECDatT",
	"Roqg2CvkT972wPa3fY3pLo7Hjf/q6Qfm1FpgYAy8ur+XytK1WqG5JaDgDXAuHJ1QXG95+R7cjnanzV6j",
	"OS8qS2i2KHv3+QaLRFop8zzEtIQyRlDLHMqqdBxZAsnBcJYyLpzYU0XIO5QMc+vtHMJfCEJw1w5E/nfH",
	"TOx+134rvKu8T28/fB0S027uxlyZyReUpMxrn2bRFMP/Dc7ZlP0vays0W5dnFiqmTtlLiNSQ7P2l7bnq",
	"nqVrUzF8l2JhwCXizNpqsP7AWrS2REnR3MhVtXXTiU0BT1jsr7gglnYNNWoPSZJbVZkc+7hzg0DITz24",
	"uTIlEJu6sOGIRBnpX6l7wlGSgOLOFFFvBY8fd6M9HNZGsE7frzdLQJXtVpxUNMqVlJi7QkvZCgQJuRjN",
	"lRm1qF3I0Tf1lC2AlugUjoQU7nLUgkxZpUekRo6MSNU2AGZyrqL4Ks0/Ru1OxAVvusDG1y2bXUJ3o5J2",
	"AttFEkuVkBq3XvGdl4ymyb6Yfyq4bQw/xu4OVXF6tkHHXL+/vEHr3T8zCM9crWTf96WwpBYGyvho/uCE",
	"KYW8h6LCuLQl1Ae06I2S9YvQaOONwDXwganwTZnQ5eCpwEPlvgtafgcjhVzY4TdXiobV73jWkt1Aj+Lc",
	"C+o9BPEsiDT0XFfnzc41PFb6KVT7if983jT9T74PK9onHpfN2OrGaEjP7pxzbbdL2w2CVfIzatR/3ef0",
	"l22GBspPM7qvig4qocPrJ7aRsb6ptM3Sxr1N5nRT0Idhm8p3AhzLnX7J1L7fh8ZciBylxXYzZqca8iUm",
	"x+OJGz1uXLAlkbbTLFutVmPw12NlFtn6rc3+nJ1fXN1ejI7Hk/GSysJTJsix2e5gyXUBUqJJTq9nySiB",
	"BUpKUHKthPfxBY0Nn2CV5DgXErnPQI0StGBT9st4Mj5yPAAtPe0ZaJG9HGUh4DZ7E7zO2pGkK+p/3hnU",
	"BeSYBLFEzRNaYmI15mIukCdBF/N218XA2ZTdhGfdWeuRGCgx7O0Pu5Zmv260NzqFO3fwm81gGraENlnI",
	"VJiuP19jc/MxCKOlM8X9rM6VpPXaCloXIvegsx9WyfZLeF/ZRHaIejuLHTB/YLVyMXcajyeTL0YQrG7z",
	"+NcfLg1OvtBW+JdAxNQZ8OQm0BtsHv18m3cSKloqI/4J+X4yOfn5Rq8UfVOV5L5VEbgu9sDWafro5S2a",
	"lyavQxPIWP1Y/xsAAP//zNB46WkRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
