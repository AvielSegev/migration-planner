// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUTW/bOBD9K8LsHiXTyeakW7KbBYy2aZAgp8AoWHEkMZBIdjiykRr67wVJfyVWCwRI",
	"bjI5fu/Nm8fZQGV7Zw0a9lBuwFct9jJ+XhNZCh+OrENijfG4R+9lg+FToa9IO9bWQJnqs911DvzsEErw",
	"TNo0MI45EP4YNKGC8nEPsxxzuLcDVXhKVRFKRnXJ4UdtqZcMJSjJWLDuJzhy0CrUnh6bFRq29Dx5a2SP",
	"kxeeJQ9RCpqhD7LXUrM2TVFbKipChYa17DzkgNGuHBrJLQaAQhsdLosDeQ6DK9gWoQVY5r8j/KZNbScF",
	"DU69zZFXrmsF23b3zb0kPbYqPxrAMfVBuP3+hBXDfoT3EekhVp6O889DOHj9Rldet3ikf7LFU/ljTEgC",
	"73SFxkf1KRZw6WTVYnY+mwcXqIMSWmbnSyHW6/VMxuuZpUZs/+vF58W/1zf318X5bD5rue9CE6y5C3Bf",
	"dEMyPJnstpPGIGWXt4usyGSDhjM0ylltguErJJ9e1mAU1tqgCjjWoZFOQwn/zOazM8jBSW6jcUI6LVZn",
	"wsdheLHRahQHX93Ap6+W0HWywiyVZbbOuMXMO6x0rVFlCQsib9K9UFDCXfrb8dijEpI9MpKH8vE10+K/",
	"PfoOU4fzIH+XyjIl9DBPpgHz7Vaamv0yFaPnK6tisCprGE3sVDrX6SqKFk8+iNgcQf1NWEMJf4nDBhTb",
	"9Scm4jy+DFoQFg+8s2HmAfF8Pn9nBYn1pY9fP4UYXLwjV9r0E1RXUmV3yd7EefbxnA9GDtxa0j9T3i/m",
	"Fx9PemP5fzsYFbcJyybkF7YxXcZ6j7Ta5TotAQHjcvwVAAD//+wwVkVABwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
