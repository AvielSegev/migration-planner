// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXQVPrNhD+Kx61RycOlFNuQHltpoUyMPAODIfF2sR62JIqrclQxv+9IymOnVhJgPfe",
	"LZFWu99++2lXfmO5qrSSKMmy6RuzeYEV+J8XxijjfmijNBoS6JcrtBYW6H5ytLkRmoSSbBrsk3Y7ZfSq",
	"kU2ZJSPkgjVNygz+WwuDnE0f1m4em5TN5NzAMBIHAkvKhH+CsLJDo7lBPAcNuaDXP87cyiqukIQLNKxJ",
	"GSmC8qCRX3k7ANvvDj2m2zge1/mrp2+YUxeBgTHw6v4XypK9RnNe1pbQbCS5C193WiItlXnex42EKpZS",
	"lyvKunJZWQLJwXCWMi6c2VNNyHtJ7GfDx3lPxoG2kK7dU6s/HTOx/e34nfG28yG9PcrSvrZiwGfyBSUp",
	"8zokVbRi/dXgnE3ZL1l3g7LV9cmCopuUvYS67LO9v7SDxNyxdBUqhu9W1SbHIbjcIBDyU/JXQ5kKiE1d",
	"sjgiUUVuZeqOcJQkoLwzZVQtgseX+xztJ6M1bNLdmrQEVNu+KqWiUa6kxNyJMWVLECTkYjRXZtShdkSh",
	"b1UpWwAV6ByOhBRuc9SBTFmtR6RGjoyIslsAMzlXUXy15h+jdqukgrc3ZZ3rRsw+odtVSXuF7SPZLY1b",
	"7/jOW0ZlcqjmnypuV8OPsbtFVZyeTdCx1O8vb9D69M8MwjNXSznMvRCW1MJAFR84H+zClZD3UNYYt7aE",
	"+h1tbO1kdSK0p3hHdU1uT+f8osylWBggeCrxvXZfBRVfwUghF3b/mStF+91vZdaR3UKP4jwIaheCuAoi",
	"ozDX9Xn7ktjfjIcSavxUfA4Ph08crjxeoWSfY+BcuDUorzeA7pRcl6DsU3CDYJX8Xpfqex0YqD7NzyFN",
	"v0vQ71dz7A3BhqHSTjNtemsdeMJ2FCJW76FMG99jQzMsRY7SYvdiY6ca8gKT4/HEtXvXollBpO00y5bL",
	"5Rj89liZRbY6a7O/Z+cXV7cXo+PxZFxQVXpiBDnO2GULKLkuQUo0yen1LBklsEBJCUqulZBusrygseEx",
	"X0uOcyGRe3VolKAFm7LfxpPxEUuZBio8uRlokb0cZaGsNnsTvMm6MaBrGn4oGNQl5JgEs0TNEyowsRpz",
	"MRfIk+CL+bgB94yzKbsJx/rzzSMxUGF4Tz5sR5r9vvbe+hRu3cFvp/E0TOZOEmRqTFcfQrFZ9RiM0dKZ",
	"4n4+5koSSp8paF2K3IPOvlklu2+qQ5cjMrebTa06YH7BauVq7jweTyY/GEGIusnjP385GZz8wFjh4zIS",
	"6gx4chPoDTGPfn7MOwk1FcqI/4LeTyYnPz/olaIvqpbcNyQC16se2Eqmj97eonlpdR2aQMaax+b/AAAA",
	"//9lFEmvsw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
