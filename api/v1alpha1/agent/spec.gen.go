// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYXVPrNhP+Kx6976UTB8pV7oBy2kwLZWDgXDBcLNYm0cGWVGlNhjL+7x1JcezEwgmU",
	"c+dYq/149tkP543lqtRKoiTLpm/M5ksswT9eGKOMe9BGaTQk0L8u0VpYoHvkaHMjNAkl2TTIJ81xyuhV",
	"I5syS0bIBavrlBn8uxIGOZs+bNQ81imbybmBviUOBJaUCb8EYWn7QnODeA4ackGvv525N2u7QhIu0LA6",
	"ZaQIir1C/s3bHrf9aV9juuvH4yZ+9fQDc2otMDAGXt3vpbJ0rVZobgkoRAOcCwcnFNdbUb7nbke702av",
	"0ZwXlSU0W5C9e33ji0RaKfM8hLSEMgZQixzKqnQYWQLJwXCWMi6c2FNFyDuQDGPr7RyCX0hCCNcOZP53",
	"h0zsfNd+K7yrvA9vP30dENMud2OhzOQLSlLmtQ+zaIrh/wbnbMr+l7UVmq3LMwsVU6fsJWRqSPb+0vZC",
	"ddfStamYf5diYcARcWZtNVh/YC1aW6KkKDdyVW2ddHJTwBMW+ysuiKVdQ43aQ0hyqyqTY9/v3CAQ8lPv",
	"3FyZEohNXdpwRKKM9K/UXeEoSUBxZ4potIJvaasqwWOKRDf7w2luBOv0/fqzBFTZbgVKRaNcSYm5K7yU",
	"rUCQkIvRXJlRG4WjAPomn7IF0BKdwpGQwh2OWidTVukRqZEDJ1LFjQMzOVdR/yrNPwb1DgM8iD76Taxb",
	"NruA7mYp7SS660mMOoEqt17xnZeM0mYfBz6V3DaHH0N3B6o4PNtOx0K/v7xB68M/MwjPXK1kP/alsKQW",
	"Bsr4qP7gxCmFvIeiwri0JdQHtOyNkvWN0HjjjcE19IEp8U2Z0PXgqcBD5b4LWn4HI4Vc2OE7V4qG1e9E",
	"1oLduB71c69T73kQZ0Gkwee6Om92sOEx06dQ7TeA5/NmCHzyfljZPnG5bMZYN0dDenbnnmu7XdhuEKyS",
	"n1Gj/ut+p79sUzRQfhrRfVV0UAkdXj+xDY31TaUtS5vwNszpUtCnYRvKdxIc406/ZGrf70NjLkSO0mK7",
	"KbNTDfkSk+PxxI0eNy7YkkjbaZatVqsx+OOxMotsfddmf87OL65uL0bH48l4SWXhIRPk0Gx3suS6ACnR",
	"JKfXs2SUwAIlJSi5VsLH+ILGhk+ySnKcC4ncM1CjBC3YlP0ynoyPHA5ASw97BlpkL0dZSLjN3gSvs3Yk",
	"6Yr6n3sGdQE5JkEsUfOElphYjbmYC+RJ0MW83XUxcDZlN+Fad9Z6TwyUGPb4h11Ls1832hudwr137jeb",
	"wTRsCS1ZyFSYrj9nD1jK6sdwGS2dKe5nd64krdda0LoQuQ8i+2GVbL+U95VRZKeot1ntHPUvrFaOA07j",
	"8WTyxR4Eq9u4/vWHo8XJF9oKfxlETJ0BT24CvMHm0c+3eSehoqUy4p/A/5PJyc83eqXom6ok962LwHW1",
	"B7am7aOXt2heGp6HppCx+rH+NwAA//+cC3L2iREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
